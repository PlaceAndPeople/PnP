// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  username      String?      @unique
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       RoomReview[]
  host          Host?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Room {
  id             BigInt  @id @default(autoincrement())
  airbnbId       String  @unique @map("airbnb_id")
  airbnbLink     String  @unique @map("airbnb_link")
  title          String
  description    String? @db.Text
  seoTitle       String  @map("seo_title")
  seoDescription String? @map("seo_description") @db.Text
  thumbnail      String?
  location       String
  price          Int
  latitude       Decimal @db.Decimal(10, 6)
  longitude      Decimal @db.Decimal(10, 6)
  capacity       Int
  checkIn        String  @map("check_in")
  checkOut       String  @map("check_out")
  checkInType    String  @map("check_in_type")

  images    RoomImage[]
  reviews   RoomReview[]
  rules     RoomRule[]
  amenities RoomAmenity[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("rooms")
}

model RoomImage {
  id          BigInt      @id @default(autoincrement())
  room        Room        @relation(fields: [roomId], references: [id])
  roomId      BigInt      @map("room_id")
  caption     String      @db.VarChar(1000)
  orientation Orientation
  imageLink   String      @map("image_link")

  @@map("room_images")
}

model Rule {
  id       BigInt @id @default(autoincrement())
  category String
  title    String
  icon     String

  rules RoomRule[]

  @@map("rules")
}

model Amenity {
  id        BigInt  @id @default(autoincrement())
  category  String
  title     String
  subTitle  String? @map("sub_title")
  icon      String
  available Boolean

  amenities RoomAmenity[]

  @@map("amenities")
}

model RoomRule {
  id     BigInt @id @default(autoincrement())
  room   Room   @relation(fields: [roomId], references: [id])
  roomId BigInt @map("room_id")
  rule   Rule   @relation(fields: [ruleId], references: [id])
  ruleId BigInt @map("rule_id")

  @@unique([roomId, ruleId])
  @@map("room_rules")
}

model RoomAmenity {
  id        BigInt  @id @default(autoincrement())
  room      Room    @relation(fields: [roomId], references: [id])
  roomId    BigInt  @map("room_id")
  amenity   Amenity @relation(fields: [amenityId], references: [id])
  amenityId BigInt  @map("amenity_id")

  @@unique([roomId, amenityId])
  @@map("room_amenities")
}

model RoomReview {
  id        BigInt   @id @default(autoincrement())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    BigInt   @map("room_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  review    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([roomId, userId])
  @@map("room_reviews")
}

enum Orientation {
  PORTRAIT
  LANDSCAPE
}

model Host {
  id            Int      @id @default(autoincrement())
  userId        String   @unique @map("user_id")
  airbnbId      String   @unique @map("airbnb_id")
  name          String
  profileImage  String? @map("profile_image")
  isSuperHost   Boolean @map("is_super_host")
  isVerified    Boolean @map("is_verified")
  about         String
  ratingCount   Int @map("rating_count")
  ratingAverage Float @map("rating_average")
  hostStartedAt DateTime @map("host_started_at")

  school       String?
  job          String?
  address      String?
  language     String?
  birth        String?
  favoriteSong String? @map("favorite_song")
  liked        String?
  interested   String?
  noTalented   String? @map("no_talented")
  bookTitle    String? @map("book_title")
  hobby        String?
  pet          String?

  tags HostTag[]

  user User @relation(fields: [userId], references: [id])

  @@map("hosts")
}

// '응답률 100%' 같은 태그
model Tag {
  id      Int      @id @default(autoincrement())
  content String   @unique @db.VarChar(100)
  created DateTime @default(now())

  host HostTag[]

  @@map("tags")
}

model HostTag {
  id     Int @id @default(autoincrement())
  hostId Int @map("host_id")
  tagId  Int @map("tag_id")

  host Host @relation(fields: [hostId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([hostId, tagId])
  @@map("host_tags")
}
