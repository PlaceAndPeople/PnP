// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  host          Host?
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String 
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Host {
  id Int @id @default(autoincrement())
  userId String @unique
  airbnbId String @unique
  name String
  profileImage String?
  isSuperHost Boolean
  isVerified Boolean
  about String
  ratingCount Int
  ratingAverage Float
  hostStartedAt DateTime

  school String?
  job String?
  address String?
  language String?
  birth String?
  favoriteSong String?
  liked String?
  interested String?
  noTelented String?
  bookTitle String?
  hobby String?
  pet String?

  tags HostTagRelation[]

  user User @relation(fields: [userId], references: [id])
}

// '응답률 100%' 같은 태그
model HostTag {
  id Int @id @default(autoincrement())
  content String

  host HostTagRelation[]
}

model HostTagRelation {
  id Int @id @default(autoincrement())
  hostId Int
  tagId Int
  
  host Host @relation(fields: [hostId], references: [id])
  tag HostTag @relation(fields: [tagId], references: [id])
}